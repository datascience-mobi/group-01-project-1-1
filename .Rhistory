draw(pheatmap(exp.clean, show_rownames = F, col = col_fun, column_title = "Expression"), newpage = FALSE)
install.packages("ComplexHeatmap")
install.packages("circlize")
library(ComplexHeatmap)
install.packages("operators")
library("operators")
install.packages("pheatmap")
library("pheatmap")
install.packages("ggplot2")
library("ggplot2")
install.packages("dplyr")
library("dplyr")
allDepMapData = readRDS("C:\\Users\\nikla\\Documents\\R\\bioinfoproject\\project-01-group-01\\AllDepMapData.RDS")
brain.anno = allDepMapData$annotation[allDepMapData$annotation$Subtype.Disease == "Glioblastoma", ]
install.packages("dplyr")
rownames(brain.anno) = brain.anno$DepMap_ID
brain.anno = brain.anno[, -1]
cell.lines = dput(rownames(brain.anno))
exp.clean = allDepMapData$expression[, -which(colnames(allDepMapData$expression) %!in% cell.lines)]
copy.clean = allDepMapData$copynumber[, -which(colnames(allDepMapData$copynumber) %!in% cell.lines)]
relevant.mutations = subset(allDepMapData$mutation, names(allDepMapData$mutation) %in% cell.lines)
ceres.clean = allDepMapData$kd.ceres[, -which(colnames(allDepMapData$kd.ceres) %!in% cell.lines)]
prob.clean = allDepMapData$kd.prob[, -which(colnames(allDepMapData$kd.prob) %!in% cell.lines)]
sum(is.na(ceres.clean))
sum(is.na(prob.clean))
sum(is.na(copy.clean))
sum(is.na(exp.clean))
sum(is.na(relevant.mutations))
copy.clean = copy.clean[-which(apply(copy.clean, 1, function(x) {sum(is.na(x))}) > 0), ]
sum(is.na(copy.clean))
sum(exp.clean < 0)
sum(prob.clean < 0)
sum(prob.clean > 1)
sum(ceres.clean == 0)
sum(prob.clean == 0)
sum(copy.clean == 0)
sum(exp.clean == 0)
dim(copy.clean) == dim(exp.clean)
gene.data.co = c(rownames(copy.clean))
gene.data.ex = c(rownames(exp.clean))
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% gene.data.co),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% gene.data.ex),]
genes.clean = rownames(exp.clean)
ceres.clean = ceres.clean[-which(rownames(ceres.clean) %!in% genes.clean),]
prob.clean = prob.clean[-which(rownames(prob.clean) %!in% genes.clean),]
genes.clean = rownames(ceres.clean)
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% genes.clean),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% genes.clean),]
rm(gene.data.co)
rm(gene.data.ex)
brain.anno$CCLE_Name = factor(brain.anno$CCLE_Name)
brain.anno$Aliases = factor(brain.anno$Aliases)
brain.anno$Primary.Disease = factor(brain.anno$Primary.Disease)
brain.anno$Subtype.Disease = factor(brain.anno$Subtype.Disease)
brain.anno$Subtype.Gender = factor(brain.anno$Gender)
brain.anno$Subtype.Source = factor(brain.anno$Source)
ceres.clean = ceres.clean[order(rownames(ceres.clean)), order(colnames(ceres.clean))]
prob.clean = prob.clean[order(rownames(prob.clean)), order(colnames(prob.clean))]
exp.clean = exp.clean[order(rownames(exp.clean)), order(colnames(exp.clean))]
copy.clean = copy.clean[order(rownames(copy.clean)), order(colnames(copy.clean))]
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
#rownames(common.genes) = common.genes$Var1
#common.genes$Var1 = NULL
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = rownames(common.genes), las = 2)
common.genes.c = subset(common.genes, common.genes > 11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
mutations.all = rbind(relevant.mutations$`ACH-000036`,relevant.mutations$`ACH-000040`, relevant.mutations$`ACH-000075`, relevant.mutations$`ACH-000098`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000215`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000591`, relevant.mutations$`ACH-000673`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000244`, relevant.mutations$`ACH-000760`, relevant.mutations$`ACH-000368`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000445`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000469`, relevant.mutations$`ACH-000479`, relevant.mutations$`ACH-000570`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000623`, relevant.mutations$`ACH-000631`, relevant.mutations$`ACH-000738`, relevant.mutations$`ACH-000756`, relevant.mutations$`ACH-000819`, relevant.mutations$`ACH-000128`, relevant.mutations$`ACH-000887`$Hugo_Symbol)
list.cells = subset(mutations.all, mutations.all$Hugo_Symbol %in% rownames(common.genes.c))
unique(list.cells$DepMap_ID)
list.mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MT-ND5"))
cells.mtnd5 = c(list.mtnd5$DepMap_ID)
list.non_mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MT-ND5"))
cells.non_mtnd5 = c(list.non_mtnd5$DepMap_ID)
list.muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MUC16"))
cells.muc16 = c(list.muc16$DepMap_ID)
list.non_muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MUC16"))
cells.non_muc16 = c(list.non_muc16$DepMap_ID)
list.tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TP53"))
cells.tp53 = c(list.tp53$DepMap_ID)
list.non_tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TP53"))
cells.non_tp53 = c(list.non_tp53$DepMap_ID)
list.ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TTN"))
cells.ttn = c(list.ttn$DepMap_ID)
list.non_ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TTN"))
cells.non_ttn = c(list.non_ttn$DepMap_ID)
exp.mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.mtnd5)]
copy.mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.mtnd5)]
ceres.mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.mtnd5)]
prob.mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.mtnd5)]
exp.non_mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.non_mtnd5)]
copy.non_mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.non_mtnd5)]
ceres.non_mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_mtnd5)]
prob.non_mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.non_mtnd5)]
exp.muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.muc16)]
copy.muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.muc16)]
ceres.muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.muc16)]
prob.muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.muc16)]
exp.non_muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.non_muc16)]
copy.non_muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.non_muc16)]
ceres.non_muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_muc16)]
prob.non_muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.non_muc16)]
exp.tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.tp53)]
copy.tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.tp53)]
ceres.tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.tp53)]
prob.tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.tp53)]
exp.non_tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.non_tp53)]
copy.non_tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.non_tp53)]
ceres.non_tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_tp53)]
prob.non_tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.non_tp53)]
exp.ttn = exp.clean[,which(colnames(exp.clean) %in% cells.ttn)]
copy.ttn = copy.clean[,which(colnames(copy.clean) %in% cells.ttn)]
ceres.ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.ttn)]
prob.ttn = prob.clean[,which(colnames(prob.clean) %in% cells.ttn)]
exp.non_ttn = exp.clean[,which(colnames(exp.clean) %in% cells.non_ttn)]
copy.non_ttn = copy.clean[,which(colnames(copy.clean) %in% cells.non_ttn)]
ceres.non_ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_ttn)]
prob.non_ttn = prob.clean[,which(colnames(prob.clean) %in% cells.non_ttn)]
mtnd5.exp.mean = as.matrix(c(rowMeans(exp.mtnd5)))
mtnd5.copy.mean = as.matrix(c(rowMeans(copy.mtnd5)))
mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.mtnd5)))
mtnd5.prob.mean = as.matrix(c(rowMeans(prob.mtnd5)))
non_mtnd5.exp.mean = as.matrix(c(rowMeans(exp.non_mtnd5)))
non_mtnd5.copy.mean = as.matrix(c(rowMeans(copy.non_mtnd5)))
non_mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.non_mtnd5)))
non_mtnd5.prob.mean = as.matrix(c(rowMeans(prob.non_mtnd5)))
muc16.exp.mean = as.matrix(c(rowMeans(exp.muc16)))
muc16.copy.mean = as.matrix(c(rowMeans(copy.muc16)))
muc16.ceres.mean = as.matrix(c(rowMeans(ceres.muc16)))
muc16.prob.mean = as.matrix(c(rowMeans(prob.muc16)))
non_muc16.exp.mean = as.matrix(c(rowMeans(exp.non_muc16)))
non_muc16.copy.mean = as.matrix(c(rowMeans(copy.non_muc16)))
non_muc16.ceres.mean = as.matrix(c(rowMeans(ceres.non_muc16)))
non_muc16.prob.mean = as.matrix(c(rowMeans(prob.non_muc16)))
tp53.exp.mean = as.matrix(c(rowMeans(exp.tp53)))
tp53.copy.mean = as.matrix(c(rowMeans(copy.tp53)))
tp53.ceres.mean = as.matrix(c(rowMeans(ceres.tp53)))
tp53.prob.mean = as.matrix(c(rowMeans(prob.tp53)))
non_tp53.exp.mean = as.matrix(c(rowMeans(exp.non_tp53)))
non_tp53.copy.mean = as.matrix(c(rowMeans(copy.non_tp53)))
non_tp53.ceres.mean = as.matrix(c(rowMeans(ceres.non_tp53)))
non_tp53.prob.mean = as.matrix(c(rowMeans(prob.non_tp53)))
ttn.exp.mean = as.matrix(c(rowMeans(exp.ttn)))
ttn.copy.mean = as.matrix(c(rowMeans(copy.ttn)))
ttn.ceres.mean = as.matrix(c(rowMeans(ceres.ttn)))
ttn.prob.mean = as.matrix(c(rowMeans(prob.ttn)))
non_ttn.exp.mean = as.matrix(c(rowMeans(exp.non_ttn)))
non_ttn.copy.mean = as.matrix(c(rowMeans(copy.non_ttn)))
non_ttn.ceres.mean = as.matrix(c(rowMeans(ceres.non_ttn)))
non_ttn.prob.mean = as.matrix(c(rowMeans(prob.non_ttn)))
boxplot_expression <- boxplot(exp.clean, ylab ="Expression level", main = "Distribution of expression", par(las =2))
boxplot_CN <- boxplot(copy.clean, ylab = "Copy number", main = "Distribution of copy number", par(las=2))
boxplot_mtnd5_exp <- boxplot(mtnd5.exp.mean, ylab = "Expression level", main = "Mean expression of all genes containing MT-ND5 as DM")
boxplot_mtnd5_CN <- boxplot(mtnd5.copy.mean, ylab = "Copy number", main = "Mean copy number of all genes containing MT-ND5 as DM")
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(exp.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(copy.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(ceres.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(prob.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
#library(ComplexHeatmap)
install.packages("circlize")
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nr = 2, nc = 2)))
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
draw(pheatmap(exp.clean, show_rownames = F), newpage = FALSE)
#library(ComplexHeatmap)
install.packages("circlize")
library(circlize)
draw(hm, newpage = FALSE)
install.packages("circlize")
#library(ComplexHeatmap)
#install.packages("circlize")
library(circlize)
draw(hm, newpage = FALSE)
#library(ComplexHeatmap)
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
draw(hm, newpage = FALSE)
#library(ComplexHeatmap)
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("draw")
BiocManager::install("ComplexHeatmap")
draw(hm, newpage = FALSE)
library(ComplexHeatmap)
draw(hm, newpage = FALSE)
?`ComplexHeatmap-package`
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
install.packages("gridGraphics")
library(gridGraphics)
install.packages("grid")
library(grid)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
gl <- lapply(list(pheatmap(exp.clean, show_rownames = F), pheatmap(copy.clean, show_rownames = F), pheatmap(ceres.clean, show_rownames = F), pheatmap(prob.clean, show_rownames = F)), drawGridHeatmap)
install.packages("grid")
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
install.packages("gridGraphics")
library(gridGraphics)
library(grid)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
gl <- lapply(list(pheatmap(exp.clean, show_rownames = F), pheatmap(copy.clean, show_rownames = F), pheatmap(ceres.clean, show_rownames = F), pheatmap(prob.clean, show_rownames = F)), drawGridHeatmap)
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
draw(hm, newpage = FALSE)
install.packages("operators")
library("operators")
install.packages("pheatmap")
library("pheatmap")
install.packages("ggplot2")
library("ggplot2")
install.packages("dplyr")
library("dplyr")
allDepMapData = readRDS("C:\\Users\\nikla\\Documents\\R\\bioinfoproject\\project-01-group-01\\AllDepMapData.RDS")
brain.anno = allDepMapData$annotation[allDepMapData$annotation$Subtype.Disease == "Glioblastoma", ]
rownames(brain.anno) = brain.anno$DepMap_ID
brain.anno = brain.anno[, -1]
cell.lines = dput(rownames(brain.anno))
exp.clean = allDepMapData$expression[, -which(colnames(allDepMapData$expression) %!in% cell.lines)]
copy.clean = allDepMapData$copynumber[, -which(colnames(allDepMapData$copynumber) %!in% cell.lines)]
relevant.mutations = subset(allDepMapData$mutation, names(allDepMapData$mutation) %in% cell.lines)
ceres.clean = allDepMapData$kd.ceres[, -which(colnames(allDepMapData$kd.ceres) %!in% cell.lines)]
prob.clean = allDepMapData$kd.prob[, -which(colnames(allDepMapData$kd.prob) %!in% cell.lines)]
sum(is.na(ceres.clean))
sum(is.na(prob.clean))
sum(is.na(copy.clean))
sum(is.na(exp.clean))
sum(is.na(relevant.mutations))
copy.clean = copy.clean[-which(apply(copy.clean, 1, function(x) {sum(is.na(x))}) > 0), ]
sum(is.na(copy.clean))
sum(exp.clean < 0)
sum(prob.clean < 0)
sum(prob.clean > 1)
sum(ceres.clean == 0)
sum(prob.clean == 0)
sum(copy.clean == 0)
sum(exp.clean == 0)
dim(copy.clean) == dim(exp.clean)
gene.data.co = c(rownames(copy.clean))
gene.data.ex = c(rownames(exp.clean))
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% gene.data.co),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% gene.data.ex),]
genes.clean = rownames(exp.clean)
ceres.clean = ceres.clean[-which(rownames(ceres.clean) %!in% genes.clean),]
prob.clean = prob.clean[-which(rownames(prob.clean) %!in% genes.clean),]
genes.clean = rownames(ceres.clean)
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% genes.clean),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% genes.clean),]
rm(gene.data.co)
rm(gene.data.ex)
brain.anno$CCLE_Name = factor(brain.anno$CCLE_Name)
brain.anno$Aliases = factor(brain.anno$Aliases)
brain.anno$Primary.Disease = factor(brain.anno$Primary.Disease)
brain.anno$Subtype.Disease = factor(brain.anno$Subtype.Disease)
brain.anno$Subtype.Gender = factor(brain.anno$Gender)
brain.anno$Subtype.Source = factor(brain.anno$Source)
ceres.clean = ceres.clean[order(rownames(ceres.clean)), order(colnames(ceres.clean))]
prob.clean = prob.clean[order(rownames(prob.clean)), order(colnames(prob.clean))]
exp.clean = exp.clean[order(rownames(exp.clean)), order(colnames(exp.clean))]
copy.clean = copy.clean[order(rownames(copy.clean)), order(colnames(copy.clean))]
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
#rownames(common.genes) = common.genes$Var1
#common.genes$Var1 = NULL
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = rownames(common.genes), las = 2)
common.genes.c = subset(common.genes, common.genes > 11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
mutations.all = rbind(relevant.mutations$`ACH-000036`,relevant.mutations$`ACH-000040`, relevant.mutations$`ACH-000075`, relevant.mutations$`ACH-000098`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000215`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000591`, relevant.mutations$`ACH-000673`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000244`, relevant.mutations$`ACH-000760`, relevant.mutations$`ACH-000368`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000445`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000469`, relevant.mutations$`ACH-000479`, relevant.mutations$`ACH-000570`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000623`, relevant.mutations$`ACH-000631`, relevant.mutations$`ACH-000738`, relevant.mutations$`ACH-000756`, relevant.mutations$`ACH-000819`, relevant.mutations$`ACH-000128`, relevant.mutations$`ACH-000887`$Hugo_Symbol)
list.cells = subset(mutations.all, mutations.all$Hugo_Symbol %in% rownames(common.genes.c))
unique(list.cells$DepMap_ID)
list.mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MT-ND5"))
cells.mtnd5 = c(list.mtnd5$DepMap_ID)
list.non_mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MT-ND5"))
cells.non_mtnd5 = c(list.non_mtnd5$DepMap_ID)
list.muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MUC16"))
cells.muc16 = c(list.muc16$DepMap_ID)
list.non_muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MUC16"))
cells.non_muc16 = c(list.non_muc16$DepMap_ID)
list.tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TP53"))
cells.tp53 = c(list.tp53$DepMap_ID)
list.non_tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TP53"))
cells.non_tp53 = c(list.non_tp53$DepMap_ID)
list.ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TTN"))
cells.ttn = c(list.ttn$DepMap_ID)
list.non_ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TTN"))
cells.non_ttn = c(list.non_ttn$DepMap_ID)
exp.mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.mtnd5)]
copy.mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.mtnd5)]
ceres.mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.mtnd5)]
prob.mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.mtnd5)]
exp.non_mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.non_mtnd5)]
copy.non_mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.non_mtnd5)]
ceres.non_mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_mtnd5)]
prob.non_mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.non_mtnd5)]
exp.muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.muc16)]
copy.muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.muc16)]
ceres.muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.muc16)]
prob.muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.muc16)]
exp.non_muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.non_muc16)]
copy.non_muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.non_muc16)]
ceres.non_muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_muc16)]
prob.non_muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.non_muc16)]
exp.tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.tp53)]
copy.tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.tp53)]
ceres.tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.tp53)]
prob.tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.tp53)]
exp.non_tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.non_tp53)]
copy.non_tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.non_tp53)]
ceres.non_tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_tp53)]
prob.non_tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.non_tp53)]
exp.ttn = exp.clean[,which(colnames(exp.clean) %in% cells.ttn)]
copy.ttn = copy.clean[,which(colnames(copy.clean) %in% cells.ttn)]
ceres.ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.ttn)]
prob.ttn = prob.clean[,which(colnames(prob.clean) %in% cells.ttn)]
exp.non_ttn = exp.clean[,which(colnames(exp.clean) %in% cells.non_ttn)]
copy.non_ttn = copy.clean[,which(colnames(copy.clean) %in% cells.non_ttn)]
ceres.non_ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_ttn)]
prob.non_ttn = prob.clean[,which(colnames(prob.clean) %in% cells.non_ttn)]
mtnd5.exp.mean = as.matrix(c(rowMeans(exp.mtnd5)))
mtnd5.copy.mean = as.matrix(c(rowMeans(copy.mtnd5)))
mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.mtnd5)))
mtnd5.prob.mean = as.matrix(c(rowMeans(prob.mtnd5)))
non_mtnd5.exp.mean = as.matrix(c(rowMeans(exp.non_mtnd5)))
non_mtnd5.copy.mean = as.matrix(c(rowMeans(copy.non_mtnd5)))
non_mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.non_mtnd5)))
non_mtnd5.prob.mean = as.matrix(c(rowMeans(prob.non_mtnd5)))
muc16.exp.mean = as.matrix(c(rowMeans(exp.muc16)))
muc16.copy.mean = as.matrix(c(rowMeans(copy.muc16)))
muc16.ceres.mean = as.matrix(c(rowMeans(ceres.muc16)))
muc16.prob.mean = as.matrix(c(rowMeans(prob.muc16)))
non_muc16.exp.mean = as.matrix(c(rowMeans(exp.non_muc16)))
non_muc16.copy.mean = as.matrix(c(rowMeans(copy.non_muc16)))
non_muc16.ceres.mean = as.matrix(c(rowMeans(ceres.non_muc16)))
non_muc16.prob.mean = as.matrix(c(rowMeans(prob.non_muc16)))
tp53.exp.mean = as.matrix(c(rowMeans(exp.tp53)))
tp53.copy.mean = as.matrix(c(rowMeans(copy.tp53)))
tp53.ceres.mean = as.matrix(c(rowMeans(ceres.tp53)))
tp53.prob.mean = as.matrix(c(rowMeans(prob.tp53)))
non_tp53.exp.mean = as.matrix(c(rowMeans(exp.non_tp53)))
non_tp53.copy.mean = as.matrix(c(rowMeans(copy.non_tp53)))
non_tp53.ceres.mean = as.matrix(c(rowMeans(ceres.non_tp53)))
non_tp53.prob.mean = as.matrix(c(rowMeans(prob.non_tp53)))
ttn.exp.mean = as.matrix(c(rowMeans(exp.ttn)))
ttn.copy.mean = as.matrix(c(rowMeans(copy.ttn)))
ttn.ceres.mean = as.matrix(c(rowMeans(ceres.ttn)))
ttn.prob.mean = as.matrix(c(rowMeans(prob.ttn)))
non_ttn.exp.mean = as.matrix(c(rowMeans(exp.non_ttn)))
non_ttn.copy.mean = as.matrix(c(rowMeans(copy.non_ttn)))
non_ttn.ceres.mean = as.matrix(c(rowMeans(ceres.non_ttn)))
non_ttn.prob.mean = as.matrix(c(rowMeans(prob.non_ttn)))
boxplot_expression <- boxplot(exp.clean, ylab ="Expression level", main = "Distribution of expression", par(las =2))
boxplot_CN <- boxplot(copy.clean, ylab = "Copy number", main = "Distribution of copy number", par(las=2))
boxplot_mtnd5_exp <- boxplot(mtnd5.exp.mean, ylab = "Expression level", main = "Mean expression of all genes containing MT-ND5 as DM")
boxplot_mtnd5_CN <- boxplot(mtnd5.copy.mean, ylab = "Copy number", main = "Mean copy number of all genes containing MT-ND5 as DM")
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(exp.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(copy.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(ceres.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(prob.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
draw(hm, newpage = FALSE)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
draw(hm, newpage = FALSE)
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
#draw(hm, newpage = FALSE)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nr = 2, nc = 2)))
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
draw(pheatmap(exp.clean, show_rownames = F), newpage = FALSE)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
rownames(common.genes) = common.genes$Var1
View(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = NULL,  ylab = "Frequency", main = "All mutated genes", las = 2)
common.genes.c = subset(common.genes, common.genes >11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
View(barplot_commongenes)
summary(common)
summary(common.genes.c)
common.genes.c
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = NULL,  ylab = "Frequency", main = "All mutated genes", las = 2)
common.genes.c = subset(common.genes, common.genes >11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
common.genes.c
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
library(pheatmap)
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(exp.clean, main = "Distribution of expression values",  show_rownames = F)
