gene.data.co = c(rownames(copy.clean))
gene.data.ex = c(rownames(exp.clean))
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% gene.data.co),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% gene.data.ex),]
genes.clean = rownames(exp.clean)
ceres.clean = ceres.clean[-which(rownames(ceres.clean) %!in% genes.clean),]
prob.clean = prob.clean[-which(rownames(prob.clean) %!in% genes.clean),]
genes.clean = rownames(ceres.clean)
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% genes.clean),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% genes.clean),]
rm(gene.data.co)
rm(gene.data.ex)
brain.anno$CCLE_Name = factor(brain.anno$CCLE_Name)
brain.anno$Aliases = factor(brain.anno$Aliases)
brain.anno$Primary.Disease = factor(brain.anno$Primary.Disease)
brain.anno$Subtype.Disease = factor(brain.anno$Subtype.Disease)
brain.anno$Subtype.Gender = factor(brain.anno$Gender)
brain.anno$Subtype.Source = factor(brain.anno$Source)
ceres.clean = ceres.clean[order(rownames(ceres.clean)), order(colnames(ceres.clean))]
prob.clean = prob.clean[order(rownames(prob.clean)), order(colnames(prob.clean))]
exp.clean = exp.clean[order(rownames(exp.clean)), order(colnames(exp.clean))]
copy.clean = copy.clean[order(rownames(copy.clean)), order(colnames(copy.clean))]
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
#rownames(common.genes) = common.genes$Var1
#common.genes$Var1 = NULL
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = rownames(common.genes), las = 2)
common.genes.c = subset(common.genes, common.genes > 11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
mutations.all = rbind(relevant.mutations$`ACH-000036`,relevant.mutations$`ACH-000040`, relevant.mutations$`ACH-000075`, relevant.mutations$`ACH-000098`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000215`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000591`, relevant.mutations$`ACH-000673`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000244`, relevant.mutations$`ACH-000760`, relevant.mutations$`ACH-000368`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000445`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000469`, relevant.mutations$`ACH-000479`, relevant.mutations$`ACH-000570`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000623`, relevant.mutations$`ACH-000631`, relevant.mutations$`ACH-000738`, relevant.mutations$`ACH-000756`, relevant.mutations$`ACH-000819`, relevant.mutations$`ACH-000128`, relevant.mutations$`ACH-000887`$Hugo_Symbol)
list.cells = subset(mutations.all, mutations.all$Hugo_Symbol %in% rownames(common.genes.c))
unique(list.cells$DepMap_ID)
list.mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MT-ND5"))
cells.mtnd5 = c(list.mtnd5$DepMap_ID)
list.non_mtnd5 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MT-ND5"))
cells.non_mtnd5 = c(list.non_mtnd5$DepMap_ID)
list.muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "MUC16"))
cells.muc16 = c(list.muc16$DepMap_ID)
list.non_muc16 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "MUC16"))
cells.non_muc16 = c(list.non_muc16$DepMap_ID)
list.tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TP53"))
cells.tp53 = c(list.tp53$DepMap_ID)
list.non_tp53 = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TP53"))
cells.non_tp53 = c(list.non_tp53$DepMap_ID)
list.ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol == "TTN"))
cells.ttn = c(list.ttn$DepMap_ID)
list.non_ttn = unique(subset(mutations.all, mutations.all$Hugo_Symbol != "TTN"))
cells.non_ttn = c(list.non_ttn$DepMap_ID)
exp.mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.mtnd5)]
copy.mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.mtnd5)]
ceres.mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.mtnd5)]
prob.mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.mtnd5)]
exp.non_mtnd5 = exp.clean[,which(colnames(exp.clean) %in% cells.non_mtnd5)]
copy.non_mtnd5 = copy.clean[,which(colnames(copy.clean) %in% cells.non_mtnd5)]
ceres.non_mtnd5 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_mtnd5)]
prob.non_mtnd5 = prob.clean[,which(colnames(prob.clean) %in% cells.non_mtnd5)]
exp.muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.muc16)]
copy.muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.muc16)]
ceres.muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.muc16)]
prob.muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.muc16)]
exp.non_muc16 = exp.clean[,which(colnames(exp.clean) %in% cells.non_muc16)]
copy.non_muc16 = copy.clean[,which(colnames(copy.clean) %in% cells.non_muc16)]
ceres.non_muc16 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_muc16)]
prob.non_muc16 = prob.clean[,which(colnames(prob.clean) %in% cells.non_muc16)]
exp.tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.tp53)]
copy.tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.tp53)]
ceres.tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.tp53)]
prob.tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.tp53)]
exp.non_tp53 = exp.clean[,which(colnames(exp.clean) %in% cells.non_tp53)]
copy.non_tp53 = copy.clean[,which(colnames(copy.clean) %in% cells.non_tp53)]
ceres.non_tp53 = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_tp53)]
prob.non_tp53 = prob.clean[,which(colnames(prob.clean) %in% cells.non_tp53)]
exp.ttn = exp.clean[,which(colnames(exp.clean) %in% cells.ttn)]
copy.ttn = copy.clean[,which(colnames(copy.clean) %in% cells.ttn)]
ceres.ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.ttn)]
prob.ttn = prob.clean[,which(colnames(prob.clean) %in% cells.ttn)]
exp.non_ttn = exp.clean[,which(colnames(exp.clean) %in% cells.non_ttn)]
copy.non_ttn = copy.clean[,which(colnames(copy.clean) %in% cells.non_ttn)]
ceres.non_ttn = ceres.clean[,which(colnames(ceres.clean) %in% cells.non_ttn)]
prob.non_ttn = prob.clean[,which(colnames(prob.clean) %in% cells.non_ttn)]
mtnd5.exp.mean = as.matrix(c(rowMeans(exp.mtnd5)))
mtnd5.copy.mean = as.matrix(c(rowMeans(copy.mtnd5)))
mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.mtnd5)))
mtnd5.prob.mean = as.matrix(c(rowMeans(prob.mtnd5)))
non_mtnd5.exp.mean = as.matrix(c(rowMeans(exp.non_mtnd5)))
non_mtnd5.copy.mean = as.matrix(c(rowMeans(copy.non_mtnd5)))
non_mtnd5.ceres.mean = as.matrix(c(rowMeans(ceres.non_mtnd5)))
non_mtnd5.prob.mean = as.matrix(c(rowMeans(prob.non_mtnd5)))
muc16.exp.mean = as.matrix(c(rowMeans(exp.muc16)))
muc16.copy.mean = as.matrix(c(rowMeans(copy.muc16)))
muc16.ceres.mean = as.matrix(c(rowMeans(ceres.muc16)))
muc16.prob.mean = as.matrix(c(rowMeans(prob.muc16)))
non_muc16.exp.mean = as.matrix(c(rowMeans(exp.non_muc16)))
non_muc16.copy.mean = as.matrix(c(rowMeans(copy.non_muc16)))
non_muc16.ceres.mean = as.matrix(c(rowMeans(ceres.non_muc16)))
non_muc16.prob.mean = as.matrix(c(rowMeans(prob.non_muc16)))
tp53.exp.mean = as.matrix(c(rowMeans(exp.tp53)))
tp53.copy.mean = as.matrix(c(rowMeans(copy.tp53)))
tp53.ceres.mean = as.matrix(c(rowMeans(ceres.tp53)))
tp53.prob.mean = as.matrix(c(rowMeans(prob.tp53)))
non_tp53.exp.mean = as.matrix(c(rowMeans(exp.non_tp53)))
non_tp53.copy.mean = as.matrix(c(rowMeans(copy.non_tp53)))
non_tp53.ceres.mean = as.matrix(c(rowMeans(ceres.non_tp53)))
non_tp53.prob.mean = as.matrix(c(rowMeans(prob.non_tp53)))
ttn.exp.mean = as.matrix(c(rowMeans(exp.ttn)))
ttn.copy.mean = as.matrix(c(rowMeans(copy.ttn)))
ttn.ceres.mean = as.matrix(c(rowMeans(ceres.ttn)))
ttn.prob.mean = as.matrix(c(rowMeans(prob.ttn)))
non_ttn.exp.mean = as.matrix(c(rowMeans(exp.non_ttn)))
non_ttn.copy.mean = as.matrix(c(rowMeans(copy.non_ttn)))
non_ttn.ceres.mean = as.matrix(c(rowMeans(ceres.non_ttn)))
non_ttn.prob.mean = as.matrix(c(rowMeans(prob.non_ttn)))
boxplot_expression <- boxplot(exp.clean, ylab ="Expression level", main = "Distribution of expression", par(las =2))
boxplot_CN <- boxplot(copy.clean, ylab = "Copy number", main = "Distribution of copy number", par(las=2))
boxplot_mtnd5_exp <- boxplot(mtnd5.exp.mean, ylab = "Expression level", main = "Mean expression of all genes containing MT-ND5 as DM")
boxplot_mtnd5_CN <- boxplot(mtnd5.copy.mean, ylab = "Copy number", main = "Mean copy number of all genes containing MT-ND5 as DM")
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(exp.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(copy.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(ceres.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
#pheatmap(prob.clean, show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
draw(hm, newpage = FALSE)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
draw(hm, newpage = FALSE)
#install.packages("circlize")
library(circlize)
install.packages("draw")
library(draw)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
grab_grob <- function(){
grid.grab()
}
drawGridHeatmap  <- function(hm) {
draw(hm)
grab_grob()
}
#draw(hm, newpage = FALSE)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nr = 2, nc = 2)))
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
draw(pheatmap(exp.clean, show_rownames = F), newpage = FALSE)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
rownames(common.genes) = common.genes$Var1
View(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
summary(common.genes)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = NULL,  ylab = "Frequency", main = "All mutated genes", las = 2)
common.genes.c = subset(common.genes, common.genes >11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
View(barplot_commongenes)
summary(common)
summary(common.genes.c)
common.genes.c
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = NULL,  ylab = "Frequency", main = "All mutated genes", las = 2)
common.genes.c = subset(common.genes, common.genes >11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
common.genes.c
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
library(pheatmap)
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(exp.clean, main = "Distribution of expression values",  show_rownames = F)
allDepMapData = readRDS("/Users/Amanda/Desktop/DepMap19Q1_allData.RDS")
allDepMapData = readRDS("C:\\Users\\nikla\\Documents\\R\\bioinfoproject\\project-01-group-01\\AllDepMapData.RDS")
brain.anno = allDepMapData$annotation[allDepMapData$annotation$Subtype.Disease == "Glioblastoma", ]
rownames(brain.anno) = brain.anno$DepMap_ID
brain.anno = brain.anno[, -1]
library("operators")
cell.lines = dput(rownames(brain.anno))
exp.clean = allDepMapData$expression[, -which(colnames(allDepMapData$expression) %!in% cell.lines)]
copy.clean = allDepMapData$copynumber[, -which(colnames(allDepMapData$copynumber) %!in% cell.lines)]
relevant.mutations = subset(allDepMapData$mutation, names(allDepMapData$mutation) %in% cell.lines)
ceres.clean = allDepMapData$kd.ceres[, -which(colnames(allDepMapData$kd.ceres) %!in% cell.lines)]
prob.clean = allDepMapData$kd.prob[, -which(colnames(allDepMapData$kd.prob) %!in% cell.lines)]
ceres.clean = ceres.clean[order(rownames(ceres.clean)), order(colnames(ceres.clean))]
prob.clean = prob.clean[order(rownames(prob.clean)), order(colnames(prob.clean))]
exp.clean = exp.clean[order(rownames(exp.clean)), order(colnames(exp.clean))]
copy.clean = copy.clean[order(rownames(copy.clean)), order(colnames(copy.clean))]
sum(is.na(ceres.clean))
sum(is.na(prob.clean))
sum(is.na(copy.clean))
sum(is.na(exp.clean))
sum(is.na(relevant.mutations))
copy.clean = copy.clean[-which(apply(copy.clean, 1, function(x) {sum(is.na(x))}) > 0), ]
sum(is.na(copy.clean))
boxplot(ceres.clean)
ceres.transf = ceres.clean[-which(ceres.clean > 3), ]
sum(ceres.clean == 0)
sum(prob.clean == 0)
sum(copy.clean == 0)
sum(exp.clean == 0)
dim(copy.clean) == dim(exp.clean)
gene.data.co = c(rownames(copy.clean))
gene.data.ex = c(rownames(exp.clean))
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% gene.data.co),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% gene.data.ex),]
genes.clean = rownames(exp.clean)
ceres.clean = ceres.clean[-which(rownames(ceres.clean) %!in% genes.clean),]
prob.clean = prob.clean[-which(rownames(prob.clean) %!in% genes.clean),]
genes.clean = rownames(ceres.clean)
exp.clean = exp.clean[-which(rownames(exp.clean) %!in% genes.clean),]
copy.clean = copy.clean[-which(rownames(copy.clean) %!in% genes.clean),]
rm(gene.data.co)
rm(gene.data.ex)
exp.clean.w0 <- exp.clean[!(apply(exp.clean, 1, function(y) any(y == 0))),]
sum(exp.clean.w0 == 0)
copy.clean.w0 <- copy.clean[!(apply(copy.clean, 1, function(y) any(y == 0))),]
sum(copy.clean.w0 == 0)
ceres.clean.w0 <- ceres.clean[!(apply(ceres.clean, 1, function(y) any(y == 0))),]
sum(ceres.clean.w0 == 0)
prob.clean.w0 <- prob.clean[!(apply(prob.clean, 1, function(y) any(y == 0))),]
sum(prob.clean.w0 == 0)
dim(copy.clean.w0) == dim(exp.clean.w0)
gene.data.ex = c(rownames(exp.clean.w0))
copy.clean.w0 = copy.clean.w0[-which(rownames(copy.clean.w0) %!in% gene.data.ex),]
genes.clean.w0 = rownames(exp.clean.w0)
ceres.clean.w0 = ceres.clean.w0[-which(rownames(ceres.clean.w0) %!in% genes.clean.w0),]
prob.clean.w0 = prob.clean.w0[-which(rownames(prob.clean.w0) %!in% genes.clean.w0),]
genes.clean.w0 = rownames(prob.clean.w0)
exp.clean.w0 = exp.clean.w0[-which(rownames(exp.clean.w0) %!in% genes.clean.w0),]
copy.clean.w0 = copy.clean.w0[-which(rownames(copy.clean.w0) %!in% genes.clean.w0),]
ceres.clean.w0 = ceres.clean.w0[-which(rownames(ceres.clean.w0) %!in% genes.clean.w0),]
rm(gene.data.ex)
brain.anno$CCLE_Name = factor(brain.anno$CCLE_Name)
brain.anno$Aliases = factor(brain.anno$Aliases)
brain.anno$Primary.Disease = factor(brain.anno$Primary.Disease)
brain.anno$Subtype.Disease = factor(brain.anno$Subtype.Disease)
brain.anno$Subtype.Gender = factor(brain.anno$Gender)
brain.anno$Subtype.Source = factor(brain.anno$Source)
relevant.mutations.combi = do.call(rbind, lapply(which(names(allDepMapData$mutation) %in% cell.lines), function(a) allDepMapData$mutation[[a]]))
common.genes = as.matrix(table(c(relevant.mutations.combi$Hugo_Symbol)))
common.genes = as.matrix(common.genes)
barplot(common.genes, beside = T, names.arg = NULL,  ylab = "Frequency", xlab = "Genes", main = "All mutated genes", las = 2)
common.genes.c = subset(common.genes, common.genes >11)
common.genes.c = common.genes.c[c(6, 11, 10, 7, 4, 9, 3, 2, 1, 8),]
common.genes.c
barplot_commongenes <- barplot(common.genes.c, beside = T, names.arg = rownames(common.genes.c), ylab = "Frequency", main = "Most common gene mutations", las = 2)
library(pheatmap)
library(grid)
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(exp.clean, main = "Distribution of expression values",  show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("cell lines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(copy.clean, main = "Distribution of copy number values", show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(ceres.clean, main = "Distribution of CERES values", show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
setHook("grid.newpage", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name="vp", just=c("right","top"))), action="prepend")
pheatmap(prob.clean, main = "Distribution of probability values", show_rownames = F)
setHook("grid.newpage", NULL, "replace")
grid.text("celllines", y=-0.07, gp=gpar(fontsize=16))
grid.text("genes", x=-0.07, rot=90, gp=gpar(fontsize=16))
library(dplyr)
mutations.tp53 = rbind(relevant.mutations$`ACH-000036`,relevant.mutations$`ACH-000040`, relevant.mutations$`ACH-000098`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000215`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000591`, relevant.mutations$`ACH-000673`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000368`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000445`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000469`, relevant.mutations$`ACH-000570`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000623`, relevant.mutations$`ACH-000673`, relevant.mutations$`ACH-000738`, relevant.mutations$`ACH-000756`, relevant.mutations$`ACH-000819`, relevant.mutations$`ACH-000128`)
mutations.tp53 = select(mutations.tp53, c(2,21, 36))
mutations.tp53 = subset(mutations.tp53, mutations.tp53$isDeleterious == "TRUE")
mutations.muc16 = rbind(relevant.mutations$`ACH-000036`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000368`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000738`, relevant.mutations$`ACH-000756`, relevant.mutations$`ACH-000819`)
mutations.muc16= select(mutations.muc16, c(2,21, 36))
mutations.muc16 = subset(mutations.muc16, mutations.muc16$isDeleterious == "TRUE")
mutations.pten = rbind(relevant.mutations$`ACH-000036`, relevant.mutations$`ACH-000040`, relevant.mutations$`ACH-000075`, relevant.mutations$`ACH-000208`, relevant.mutations$`ACH-000215`, relevant.mutations$`ACH-000137`, relevant.mutations$`ACH-000152`, relevant.mutations$`ACH-000231`, relevant.mutations$`ACH-000244`, relevant.mutations$`ACH-000760`, relevant.mutations$`ACH-000376`, relevant.mutations$`ACH-000464`, relevant.mutations$`ACH-000570`, relevant.mutations$`ACH-000571`, relevant.mutations$`ACH-000623`, relevant.mutations$`ACH-000128`)
mutations.pten = select(mutations.pten, c(2,21, 36))
mutations.pten = subset(mutations.pten, mutations.pten$isDeleterious == "TRUE")
list.tp53.genes = unique(subset(mutations.tp53))
genes.tp53 <- c(list.tp53.genes$Hugo_Symbol)
ceres.tp53.genes <- ceres.clean[which(rownames(ceres.clean) %in% genes.tp53),]
list.muc16.genes = unique(subset(mutations.muc16))
genes.muc16 <- c(list.muc16.genes$Hugo_Symbol)
ceres.muc16.genes <- ceres.clean[which(rownames(ceres.clean) %in% genes.muc16),]
list.pten.genes = unique(subset(mutations.pten))
genes.pten <- c(list.pten.genes$Hugo_Symbol)
ceres.pten.genes <- ceres.clean[which(rownames(ceres.clean) %in% genes.pten),]
qqnorm(ceres.tp53.genes$`ACH-000036`, main = "QQ-Plot of CERES scores of all genes of cell line ACH-000036")
qqline(ceres.tp53.genes$`ACH-000036`, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7)
shapiro.test(ceres.tp53.genes$`ACH-000036`)
ceres.allDM.genes=rbind(ceres.tp53.genes, ceres.pten.genes, ceres.muc16.genes)
lapply(ceres.allDM.genes,shapiro.test)
t(ceres.tp53.genes) -> ceres.tp53.genes_t
t(ceres.pten.genes) -> ceres.pten.genes_t
t(ceres.muc16.genes) -> ceres.muc16.genes_t
cor.ceres.tp53.genes_t <-cor(ceres.tp53.genes_t, method="spearman")
cor.ceres.tp.53.only <-cor.ceres.tp53.genes_t[1:734,642]
cor.ceres.muc16.genes_t<-cor(ceres.muc16.genes_t, method="spearman")
cor.ceres.muc16.only<-cor.ceres.muc16.genes_t[1:478,251]
cor.ceres.pten.genes_t<-cor(ceres.pten.genes_t, method="spearman")
cor.ceres.pten.only<-cor.ceres.pten.genes_t[1:505,328]
library(Hmisc)
sig.cor.ceres.tp53.genes_t <-rcorr(as.matrix(ceres.tp53.genes_t), type="spearman")
sig.cor.ceres.tp53.only <-as.data.frame(sig.cor.ceres.tp53.genes_t$r[1:734, 642])
colnames(sig.cor.ceres.tp53.only) <- c("Correlation to TP53")
sig.cor.ceres.muc16.genes_t <-rcorr(as.matrix(ceres.muc16.genes_t), type="spearman")
sig.cor.ceres.muc16.only <-as.data.frame(sig.cor.ceres.muc16.genes_t$r[1:478, 251])
colnames(sig.cor.ceres.muc16.only) <- c("Correlation to MUC-16")
sig.cor.ceres.pten.genes_t <-rcorr(as.matrix(ceres.pten.genes_t), type="spearman")
sig.cor.ceres.pten.only <-as.data.frame(sig.cor.ceres.pten.genes_t$r[1:505, 328])
colnames(sig.cor.ceres.pten.only) <- c("Correlation to PTEN")
sig.cor.ceres.tp53.only[abs(sig.cor.ceres.tp53.only) > 0.05]<- NA
SST.tp53<-na.omit(sig.cor.ceres.tp53.only)
sig.cor.ceres.muc16.only[abs(sig.cor.ceres.muc16.only) > 0.05] <- NA
SST.muc16<-na.omit(sig.cor.ceres.muc16.only)
sig.cor.ceres.pten.only[abs(sig.cor.ceres.pten.only) > 0.05] <- NA
SST.pten<-na.omit(sig.cor.ceres.pten.only)
mlr.mat = as.data.frame(cbind(rowMeans(exp.clean.w0), rowMeans(copy.clean.w0), rowMeans(ceres.clean.w0), rowMeans(prob.clean.w0)))
colnames(mlr.mat) = c("expression", "copynumber", "ceres", "probability")
summary(lm(expression ~ ., data = mlr.mat))
summary(lm(copynumber ~ ., data = mlr.mat))
summary(lm(ceres ~ ., data = mlr.mat))
summary(lm(probability ~ ., data = mlr.mat))
library(caTools)
set.seed(123) #initialize the random numbers
split.exp = sample.split(mlr.mat$expression, SplitRatio = 0.8) #split the mlr.mat into 4/5 Training and 1/5 Testing expression values
split.exp = as.data.frame(split.exp) #converting split.exp to a data frame for further analysis
training_set_exp = subset(mlr.mat, split.exp == TRUE) #use labels to get training data
test_set_exp = subset(mlr.mat, split.exp == FALSE) #dim(test_set_exp) will give you 2309 --> 11545/5*1 = 2309 --> train/test split worked
#for copy number model
set.seed(123)
split.copy = sample.split(mlr.mat$copynumber, SplitRatio = 0.8)
split.copy = as.data.frame(split.copy)
training.set.copy = subset(mlr.mat, split.copy == TRUE)
test.set.copy = subset(mlr.mat, split.copy == FALSE)
#dimensions were not right. Explanation below.
#for ceres model
set.seed(123)
split.ceres = sample.split(mlr.mat$ceres, SplitRatio = 0.8)
training.set.ceres = subset(mlr.mat, split.ceres == TRUE)
test.set.ceres = subset(mlr.mat, split.ceres == FALSE)
#for probability model
set.seed(123)
split.prob = sample.split(mlr.mat$probability, SplitRatio = 0.8)
training.set.prob = subset(mlr.mat, split.prob ==TRUE)
test.set.prob = subset(mlr.mat, split.prob == FALSE)
exp.regressor = lm(expression ~ ., data = training_set_exp)
ceres.regressor = lm(ceres ~ ., data = as.data.frame(training.set.ceres))
prob.regressor = lm(probability ~., data = as.data.frame(training.set.prob))
exp_pred = predict(exp.regressor, newdata = test_set_exp)
test_set_exp$Prediction = exp_pred #add predictions to mlr.mat
#now a comparison of the Predictions (last column) with the real values for the expression (1st column) is possible
ceres_pred = predict(ceres.regressor, newdata = test.set.ceres)
test.set.ceres$Prediction = ceres_pred
prob_pred = predict(prob.regressor, newdata = test.set.prob)
test.set.prob$Prediction = prob_pred
library(reshape2)
library(ggplot2)
plot.exp.m <- melt(test_set_exp$expression)
a <- melt(test_set_exp$Prediction)
colnames(plot.exp.m) <- "Expression"
rownames(plot.exp.m) = rownames(test.set.ceres)
colnames(a) <- "Prediction"
plot.exp.m <- cbind(plot.exp.m,a)
plottingData.exp <- melt(plot.exp.m)
exp_plot <- ggplot(data = plottingData.exp, aes(x=value, fill=variable)) +
geom_density(alpha=.3) +
ggtitle(paste0("Performance evaluation Lin.Reg. expression")) +
ylab("Density") +
xlab("Expression values") +
theme_bw(base_size = 7) +
theme(legend.position="bottom",
legend.direction="horizontal",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.title= element_blank(),
axis.title.x = element_blank(),
strip.text.y = element_text(angle = 0))
exp_plot
plot.ceres.m <- melt(test.set.ceres$ceres)
a <- melt(test.set.ceres$Prediction)
colnames(plot.ceres.m) <- "CERES"
rownames(plot.ceres.m) = rownames(test.set.ceres)
colnames(a) <- "Prediction"
plot.ceres.m <- cbind(plot.ceres.m,a)
plottingData.ceres <- melt(plot.ceres.m)
ceres_plot <- ggplot(data = plottingData.ceres, aes(x=value, fill=variable)) +
geom_density(alpha=.3) +
ggtitle(paste0("Performance evaluation Lin.Reg. CERES score")) +
ylab("Density") +
xlab("CERES score values") +
theme_bw(base_size = 7) +
theme(legend.position="bottom",
legend.direction="horizontal",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.title= element_blank(),
axis.title.x = element_blank(),
strip.text.y = element_text(angle = 0))
ceres_plot
library(reshape2)
library(ggplot2)
plot.prob.m <- melt(test.set.prob$probability)
a <- melt(test.set.prob$Prediction)
colnames(plot.prob.m) <- "Probability"
rownames(plot.prob.m) = rownames(test.set.prob)
colnames(a) <- "Prediction"
plot.prob.m <- cbind(plot.prob.m,a)
plottingData.prob <- melt(plot.prob.m)
prob_plot <- ggplot(data = plottingData.prob, aes(x=value, fill=variable)) +
geom_density(alpha=.3) +
ggtitle(paste0("Performance evaluation Lin.Reg. probability")) +
ylab("Density") +
xlab("Probability values") +
theme_bw(base_size = 7) +
theme(legend.position="bottom",
legend.direction="horizontal",
plot.title = element_text(hjust = 0.5),           axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.title= element_blank(),
axis.title.x = element_blank(),
strip.text.y = element_text(angle = 0))
prob_plot
boxplot(ceres.clean)
ggplot(ceres.clean)
View(exp_plot)
exp_plot
ggplot(ceres.clean)
?ggplot
ceres.clean.plot <- ggplot(ceres.clean, aes(x= cell lines, y= CERES score)) +
geom_boxplot()
ceres.clean.plot = ggplot(ceres.clean, aes(x= cell lines, y= CERES score)) +
geom_boxplot()
ceres.clean.plot = ggplot(data=ceres.clean, aes(x= cell lines, y= CERES score)) +
geom_boxplot()
ceres.clean.plot = ggplot(ceres.clean, aes(x= cell lines, y= CERES score))
ceres.clean.plot = ggplot(data=ceres.clean, aes(x= "cell lines", y= "CERES score")) +
geom_boxplot()
View(ceres.clean.plot)
ggplot(data=ceres.clean, aes(x= "cell lines", y= "CERES score")) +
geom_boxplot()
View(ceres.clean)
boxplot(ceres.clean)
ggplot(ceres.clean)
ggplot(ceres.clean) +
geom_boxplot()
ggplot(ceres.clean, aes(x=dose, y=len)) +
geom_boxplot()
ggplot(ceres.clean, aes(x= col(ceres.clean), y= row(ceres.clean))) +
geom_boxplot()
ggplot(data=ceres.clean, aes(x= "cell lines", y= "CERES score")) +
geom_boxplot()
ggplot(data = plottingData.exp, aes(x=value, fill=variable)) +
geom_density(alpha=.3) +
ggtitle(paste0("Performance evaluation Lin.Reg. expression")) +
ylab("Density") +
xlab("Expression values") +
theme_bw(base_size = 7) +
theme(legend.position="bottom",
legend.direction="horizontal",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.title= element_blank(),
axis.title.x = element_blank(),
strip.text.y = element_text(angle = 0))
View(plottingData.exp)
View(common.genes)
